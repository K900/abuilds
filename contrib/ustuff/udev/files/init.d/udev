#!/sbin/runscript
# Copyright 1999-2008 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

description="Mount /dev and let udev create the device-nodes"

depend()
{
	if [ -f /etc/init.d/sysfs ]; then
		# require new enough openrc with sysinit being extra runlevel
		# on linux we just check if sysfs init-script exists
		# this is to silence out ugly warnings about not-existing sysfs script
		provide dev
		need sysfs
		before checkfs fsck

		# udev does not work inside vservers
		keyword novserver
	fi
}

display_hotplugged_services() {
	local svcfile= svc= services=
	for svcfile in "${RC_SVCDIR}"/hotplugged/*; do
		svc="${svcfile##*/}"
		[ -x "${svcfile}" ] || continue

		# do not display this - better: do only inject it later :)
		[ "$svc" = "udev-postmount" ] && continue

		services="${services} ${svc}"
	done
	[ -n "${services}" ] && einfo "Device initiated services:${HILITE}${services}${NORMAL}"
}

inject_postmount_initd() {
	mark_service_hotplugged udev-postmount
	#einfo "Injected udev-postmount service"
}

gentoostart()
{
	# do not run this on too old baselayout - udev-addon is already loaded!
	if [ ! -e /lib/librc.so -a -f /etc/init.d/sysfs ]; then
		eerror "The $SVCNAME init-script is written for baselayout-2!"
		eerror "Please do not use it with baselayout-1!".
		return 1
	fi

	start_addon udev || return 1
	display_hotplugged_services
	inject_postmount_initd
	return 0
}

start()
{
	. /etc/udev/udev.conf

	# remove trailing slash from udev_root
	UDEV_ROOT=$(echo "${udev_root}" |sed 's/\/*$//')
	# Sanity check #1, udev requires that the kernel support tmpfs:
        if ! grep -wq tmpfs /proc/filesystems ; then
          echo "Sorry, but you need tmpfs support in the kernel to use udev."
          echo
          echo "FATAL:  Refusing to start udev."
          exit 1
        fi

        # Sanity check #2, make sure that a 2.6.x kernel is new enough:
        if [ "$(uname -r | cut -f 1,2 -d .)" = "2.6" ]; then
          if [ "$(uname -r | cut -f 3 -d . | sed 's/[^[:digit:]].*//')" -lt "15" ]; then
            echo "Sorry, but you need a 2.6.15+ kernel to use udev."
            echo "Your kernel version is only $(uname -r)."
            echo
            echo "FATAL:  Refusing to start udev."
            exit 1
          fi
        fi

        # Disable hotplug helper since udevd listens to netlink:
        if [ -e /proc/sys/kernel/hotplug ]; then
          echo "" > /proc/sys/kernel/hotplug
        fi

	# if udevd is already running, rc.udev start will try to re-run
	# failed events. Else, it will start udevd.
	if ps axc | grep -q udevd ; then
	  OPT="--type=failed $OPT"
	  ( cd ${UDEV_ROOT}/.udev
	    for TMPFILE in tmp-rules-*.rules ; do
		mv $TMPFILE /etc/udev/rules.d/${TMPFILE/tmp-rules--/} 2>/dev/null
	    done
	  ) 
	else
	  # Mount tmpfs on $UDEV_ROOT:
	  if ! grep -E -q "^[^[:space:]]+ $UDEV_ROOT tmpfs" /proc/mounts; then
		# umount shm if needed
		if grep -E -q "^[^[:space:]]+ $UDEV_ROOT/shm tmpfs" /proc/mounts; then
			umount -l $UDEV_ROOT/shm
		fi

		# Umount pts if needed, we will remount it later:
		if grep -E -q "^[^[:space:]]+ $UDEV_ROOT/pts devpts" /proc/mounts; then
			umount -l $UDEV_ROOT/pts
		fi

		# Mount tmpfs on $UDEV_ROOT:
		# the -n is because we don't want $UDEV_ROOT umounted when
		# someone (rc.[06]) calls umount -a
		mount -n -o mode=0755 -t tmpfs tmpfs $UDEV_ROOT 

		# Remount pts:
		mkdir $UDEV_ROOT/pts 2> /dev/null
		mount -n -o mode=0620,gid=5 -t devpts devpts $UDEV_ROOT/pts
	  fi

	  # Add the static nodes to $UDEV_ROOT:
	  cp --preserve=all --recursive --remove-destination /lib/udev/devices/* $UDEV_ROOT 

	  # Start udevd:
	  echo "Starting udevd:  /sbin/udevd --daemon"
	  /sbin/udevd --daemon

	  # Create rootdev rules
	  DEVICENUMBER=$( /bin/stat -c %d / )
	  MAJORNUMBER=$(($DEVICENUMBER / 256))
	  MINORNUMBER=$(($DEVICENUMBER % 256))

	  if [ -d /dev/.udev/rules.d ] ; then
		echo 'ACTION=="add|change", SUBSYSTEM=="block", ENV{MAJOR}=="'$MAJORNUMBER'", ENV{MINOR}=="'$MINORNUMBER'", SYMLINK+="root"' > /dev/.udev/rules.d/61-dev-root-link.rules
	  fi

	fi

	echo "Triggering udev events:  /sbin/udevadm trigger $OPT"	
	# Call udevtrigger and udevsettle to do the device configuration:
	/sbin/udevadm trigger $OPT && /sbin/udevadm settle --timeout=120



}

stop()
{
	echo "Stopping udevd"
        if [ -e /proc/sys/kernel/hotplug ]; then
          echo /sbin/hotplug > /proc/sys/kernel/hotplug
        fi
	killall udevd 

}

restart() {
	echo "Restarting udevd"
	killall udevd
	sleep 1
	udevd --daemon

}
