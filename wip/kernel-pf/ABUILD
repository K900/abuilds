pkgname=kernel-pf
pkgver=3.2.5_pf
vanilla_ver=$(echo $pkgver | cut -d. -f1).$(echo $pkgver | cut -d. -f2)
kernel_ver=$(echo $pkgver | sed -e s/_/-/g)
kernel_base=$(echo $kernel_ver | sed 's/^[^.]*\.//' | sed 's/\..*$//')
pkgbuild=1
arch=("auto")

shortdesc=("Linux kernel with postfactum's patches.")

tags=("base sys-kernel")
adddep="kernel-modules-pf==$pkgver kernel-firmware-pf"

source=("http://www.kernel.org/pub/linux/kernel/v3.x/linux-${vanilla_ver}.tar.xz")
custom_opts="skip_gendeps"

pkglist=("modules headers firmware sources")

modules() {
	pkgname=kernel-modules-pf
	arch=("auto")
	shortdesc=('SMP Linux kernel modules for postfactum kernel')
	tags=('base sys-kernel')
	adddep="module-init-tools>=3.11 kernel-pf==$pkgver"
    custom_opts="skip_gendeps"
}

headers() {
	pkgname=kernel-headers-pf
	arch=("auto")
	shortdesc=('kernel-headers (Linux kernel include files) for postfactum kernel')
	tags=('develop sys-kernel')
    custom_opts="skip_gendeps no_strip"
}

firmware() {
	pkgname=kernel-firmware-pf
	arch=("fw")
	shortdesc=('kernel-firmware (Firmware installed by the kernel) for postfactum kernel')
	tags=('base sys-kernel')
    custom_opts="skip_gendeps no_strip"
}

sources() {
	pkgname=kernel-source-pf
	arch=('auto')
	shortdesc=('kernel-source (Linux kernel source) with postfactum patches')
	tags=('develop sys-kernel')
    custom_opts="skip_gendeps no_strip"
}

build() {
	go_src_dir
	burn_patches

	# AUFS
	( cd .. ; AUBRANCH=${AUBRANCH:-$kernel_base} $filedir/aufs_checkout.sh )

        # Remove dirty hacks here
        rm ../aufs3-standalone/include/linux/Kbuild

        # Copy aufs tree
        cp -rv ../aufs3-standalone/Documentation .
        cp -rv ../aufs3-standalone/fs .
        cp -rv ../aufs3-standalone/include/ .

        # Applying AUFS patch
        cat ../aufs3-standalone/aufs3-base.patch | patch -p1 --verbose
        cat ../aufs3-standalone/aufs3-kbuild.patch | patch -p1 --verbose
        cat ../aufs3-standalone/aufs3-loopback.patch | patch -p1 --verbose
        cat ../aufs3-standalone/aufs3-proc_map.patch | patch -p1 --verbose
        cat ../aufs3-standalone/aufs3-standalone.patch | patch -p1 --verbose
	echo AUFS
        # Clean up
        rm -rf ../aufs3-standalone

	# KERNEL-PF
	wget -qO- http://pf.natalenko.name/sources/$vanilla_ver/patch-$kernel_ver.bz2 | bzcat | patch -Np1

	# Now copy kernel config
	if [ "$ARCH" = "x86_64" ] ; then
		cat $filedir/3.$kernel_base.defconfig-x86_64 > .config
	else
		cat $filedir/3.$kernel_base.defconfig-x86 > .config
	fi

	# Running make oldconfig seems to be a good idea when upgrading kernel version. Note that here can be interactive questions.
	make oldconfig
	if [ "$KERNEL_CONFIG" != "" ] ; then
		make nconfig
		exit 1
	fi
	if [ "$COPY_CONFIG" != "" ]; then
		cat .config > $filedir/newconfig
	fi

	# Now, let's build the kernel
	make -j${numjobs}
}

after_build() {
	go_src_dir
	mkdir -p ${pkgdir}/boot
	cp arch/x86/boot/bzImage ${pkgdir}/boot/vmlinuz-${kernel_ver}
	ln -s vmlinuz-${kernel_ver} $pkgdir/boot/vmlinuz
	cp System.map $pkgdir/boot/System.map-${kernel_ver}
	ln -s System.map-${kernel_ver} $pkgdir/boot/System.map
	cp .config $pkgdir/boot/config-${kernel_ver}
	ln -s config-${kernel_ver} $pkgdir/boot/config
}

modules_prep() {
	go_src_dir
	make modules_install INSTALL_MOD_PATH=${pkgdir}

	# Remove firmware from modules package. I don't know why it installs together with modules...
	rm -rf ${pkgdir}/lib/firmware
	rm ${pkgdir}/lib/modules/${kernel_ver}/{source,build}
	ln -sf /usr/src/linux-${kernel_ver} ${pkgdir}/lib/modules/${kernel_ver}/source
	ln -sf /usr/src/linux-${kernel_ver} ${pkgdir}/lib/modules/${kernel_ver}/build

	mkdir -p ${pkgdir}/install
	cat << EOF > ${pkgdir}/install/doinst.sh

# A good idea whenever kernel modules are added or changed:
if [ -x sbin/depmod ]; then
  chroot . /sbin/depmod -a ${kernel_ver} 1> /dev/null 2> /dev/null
fi

EOF
}

headers_prep() {
	go_src_dir
	make headers_install INSTALL_HDR_PATH=${pkgdir}/usr
	( cd $pkgdir/usr/include && mv asm asm-x86 && ln -s asm-x86 asm )
	find $pkgdir/usr/include -name '.install' | xargs rm
	find $pkgdir/usr/include -name '..install.cmd' | xargs rm

	# Copy aufs-tree manually, since we removed dirty hacks
	install -m644 include/linux/aufs_type.h ${pkgdir}/usr/include/linux/
}

firmware_prep() {
	go_src_dir
    mkdir linux-firmware
    cd linux-firmware
    git clone git://git.kernel.org/pub/scm/linux/kernel/git/dwmw2/linux-firmware.git
    mkdir -p $pkgdir/lib/firmware
    cp -ra linux-firmware/* $pkgdir/lib/firmware
    cd ..
    rm -rf linux-firmware
}

sources_prep() {
	go_src_dir
	mkdir -p $pkgdir/usr/src/linux-${kernel_ver}
	echo "Copying kernel tree, please wait. It may take about 10 minutes"
	cp -ard ./* $pkgdir/usr/src/linux-${kernel_ver}/
	( cd $pkgdir/usr/src/linux-${kernel_ver} && make mrproper )
	cat .config > $pkgdir/usr/src/linux-${kernel_ver}/.config
	( cd $pkgdir/usr/src/linux-${kernel_ver} && make prepare && make modules_prepare )
	( cd $pkgdir/usr/src ; ln -s linux-$kernel_ver linux )
	# recreate config. I forgot why it was needed, but it takes no time, so let it be.
	cat .config > $pkgdir/usr/src/linux-$kernel_ver/.config
}
